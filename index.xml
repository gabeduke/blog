<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dummy on Adventures in over-engineering</title><link>https://gabeduke.github.io/weblog/</link><description>Recent content in dummy on Adventures in over-engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Feb 2020 09:30:08 -0500</lastBuildDate><atom:link href="https://gabeduke.github.io/weblog/index.xml" rel="self" type="application/rss+xml"/><item><title>Faasd in LXC</title><link>https://gabeduke.github.io/weblog/posts/2020/02/faasd-in-lxc/</link><pubDate>Thu, 27 Feb 2020 09:30:08 -0500</pubDate><guid>https://gabeduke.github.io/weblog/posts/2020/02/faasd-in-lxc/</guid><description>TL/DR
This post explores running faasd in LXC containers.
As a consumer of Faasd on a linux workstation I wanted an options to run in native containers. Faasd Developers can benefit from a native runtime environment, as well as cheap/fast sandbox environments provided by LXC. OpenFaas function function developers can benefit from a tighter inner-loop that doesnt invole pushing docker images to a remote registry just to test their functions Introduction First lets discuss what exactly is faasd and what it can be used for.</description></item><item><title>Banzai Kafka in Kubernetes</title><link>https://gabeduke.github.io/weblog/posts/2020/01/banzai-kafka-in-kubernetes/</link><pubDate>Thu, 09 Jan 2020 09:30:08 -0500</pubDate><guid>https://gabeduke.github.io/weblog/posts/2020/01/banzai-kafka-in-kubernetes/</guid><description>This example deploys a Kafka cluster using Banzai Cloud Kafka Operator. This guide is a condensed version of the official Banzai documentation, the idea being to quickly get up and running with Kafka.
Setup Prerequisites:
Civo CLI (Not strictly necessary but it is FAST) Helm3 Kubectl Provision Kubernetes Any kubernetes cluster will do but for this tutorial I'll use Civo Cloud's offering.
civo k8s create \ --nodes 3 \ --save --switch --wait \ kafka Provision Dependencies Let's get the core dependencies provisioned.</description></item><item><title>IOT Fleet Metrics (Part1)</title><link>https://gabeduke.github.io/weblog/posts/2019/11/iot-fleet-metrics-part1/</link><pubDate>Tue, 19 Nov 2019 09:30:04 -0500</pubDate><guid>https://gabeduke.github.io/weblog/posts/2019/11/iot-fleet-metrics-part1/</guid><description>TL/DR This guide documents a simple Prometheus PushGateway setup on top of Civo's k3s offering. We will then push some data to the gateway and visualize it in Grafana.
The end result for this project is an environmental monitoring system that gathers sensor data. I won't actually deploy the scrape jobs in this guide, but we will send a metric with curl and visualize it in each of the core components.</description></item><item><title>About</title><link>https://gabeduke.github.io/weblog/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gabeduke.github.io/weblog/about/</guid><description>Have you ever wanted to &amp;hellip;
Build a kubernetes cluster to log sensor data Partition a rack server to run a python script Create a dead man's switch for a VPN connection All the above and more behind this door.</description></item><item><title>Civo IOT</title><link>https://gabeduke.github.io/weblog/projects/civo-iot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gabeduke.github.io/weblog/projects/civo-iot/</guid><description>asdf</description></item></channel></rss>